/**
 * Utilitaire pour d√©clencher la r√©g√©n√©ration des sitemaps
 * √Ä utiliser apr√®s ajout/modification/suppression d'entreprise
 */

const SITEMAP_API_URL = import.meta.env.VITE_SITEMAP_REGENERATE_URL || '/api/regenerate-sitemaps';
const SITEMAP_SECRET = import.meta.env.VITE_SITEMAP_REGENERATE_SECRET;

/**
 * D√©clenche la r√©g√©n√©ration des sitemaps
 * @param {string} reason - Raison du d√©clenchement (pour les logs)
 * @returns {Promise<boolean>} - Succ√®s ou √©chec
 */
export async function triggerSitemapRegeneration(reason = 'manual') {
  try {
    console.log(`üó∫Ô∏è  D√©clenchement r√©g√©n√©ration sitemap: ${reason}`);

    const response = await fetch(SITEMAP_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        secret: SITEMAP_SECRET,
        reason: reason,
        timestamp: new Date().toISOString()
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Sitemap r√©g√©n√©ration d√©clench√©e:', data);
      return true;
    } else {
      console.error('‚ùå Erreur r√©g√©n√©ration sitemap:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©clenchement:', error);
    return false;
  }
}

/**
 * D√©clenche la r√©g√©n√©ration avec un d√©lai (debouncing)
 * Utile pour √©viter de r√©g√©n√©rer trop souvent
 */
let regenerationTimeout = null;
export function triggerSitemapRegenerationDelayed(reason = 'manual', delayMs = 60000) {
  // Annuler le pr√©c√©dent timer si existe
  if (regenerationTimeout) {
    clearTimeout(regenerationTimeout);
  }

  // Programmer la r√©g√©n√©ration dans X minutes
  regenerationTimeout = setTimeout(() => {
    triggerSitemapRegeneration(reason);
    regenerationTimeout = null;
  }, delayMs);

  console.log(`‚è±Ô∏è  R√©g√©n√©ration sitemap programm√©e dans ${delayMs/1000}s`);
}

/**
 * Hook √† utiliser dans les composants React
 */
export function useSitemapRegeneration() {
  const triggerNow = (reason) => triggerSitemapRegeneration(reason);
  const triggerDelayed = (reason, delay) => triggerSitemapRegenerationDelayed(reason, delay);

  return { triggerNow, triggerDelayed };
}
