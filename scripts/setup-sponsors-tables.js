/**
 * Script pour cr√©er les tables sponsors et sponsor_stats dans Supabase
 * Usage: node scripts/setup-sponsors-tables.js
 */

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables Supabase manquantes!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function setupSponsors() {
  try {
    console.log('üöÄ Cr√©ation des tables sponsors...\n');

    // Lire le fichier SQL
    const sqlPath = join(__dirname, '..', 'supabase', 'migrations', 'create_sponsors_tables.sql');
    const sqlContent = readFileSync(sqlPath, 'utf-8');

    // Ex√©cuter le SQL (Note: Supabase JS ne supporte pas directement l'ex√©cution de SQL brut)
    // Il faut utiliser la fonction RPC ou ex√©cuter via le dashboard Supabase
    console.log('üìÑ SQL √† ex√©cuter dans Supabase SQL Editor:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    console.log(sqlContent);
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    console.log('\nüìù Instructions:');
    console.log('1. Va sur: https://supabase.com/dashboard/project/[YOUR_PROJECT]/sql');
    console.log('2. Copie-colle le SQL ci-dessus');
    console.log('3. Clique sur "Run"');

    console.log('\n‚úÖ Ou ex√©cute directement avec psql si tu as acc√®s:');
    console.log(`   psql "${supabaseUrl.replace('https://', 'postgresql://postgres:PASSWORD@').replace('.supabase.co', '.supabase.co:5432')}/postgres" -f supabase/migrations/create_sponsors_tables.sql`);

    // V√©rifier si les tables existent d√©j√†
    console.log('\nüîç V√©rification des tables...');

    const { data: sponsors, error: sponsorsError } = await supabase
      .from('sponsors')
      .select('count')
      .limit(1);

    if (!sponsorsError) {
      console.log('‚úÖ Table "sponsors" existe d√©j√†');

      const { data: sponsorsList } = await supabase
        .from('sponsors')
        .select('*')
        .eq('is_active', true);

      console.log(`üìä ${sponsorsList?.length || 0} commanditaire(s) actif(s)`);
      if (sponsorsList && sponsorsList.length > 0) {
        console.log('\nüìã Commanditaires:');
        sponsorsList.forEach(sponsor => {
          console.log(`   - ${sponsor.company_name}: ${sponsor.slogan}`);
        });
      }
    } else {
      console.log('‚ö†Ô∏è  Table "sponsors" n\'existe pas encore - ex√©cutez le SQL ci-dessus');
    }

    const { data: stats, error: statsError } = await supabase
      .from('sponsor_stats')
      .select('count')
      .limit(1);

    if (!statsError) {
      console.log('‚úÖ Table "sponsor_stats" existe d√©j√†');
    } else {
      console.log('‚ö†Ô∏è  Table "sponsor_stats" n\'existe pas encore - ex√©cutez le SQL ci-dessus');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

setupSponsors();
